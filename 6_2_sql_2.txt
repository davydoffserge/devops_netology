Задача 1


serge@ubu2:~$ sudo docker pull postgres
[sudo] пароль для serge: 
Using default tag: latest
latest: Pulling from library/postgres
5eb5b503b376: Pull complete 
daa0467a6c48: Pull complete 
7cf625de49ef: Pull complete 
bb8afcc973b2: Pull complete 
c74bf40d29ee: Pull complete 
2ceaf201bb22: Pull complete 
1255f255c0eb: Pull complete 
12a9879c7aa1: Pull complete 
4e80271c8de8: Pull complete 
04d0275af286: Pull complete 
3d4fe3f39342: Pull complete 
60f2aefbd6d9: Pull complete 
98ace1022c39: Pull complete 
Digest: sha256:156c50d4b6fe6ea4e4645ccdeabf54fedc59a561bfece047cdf4c26a42deab72
Status: Downloaded newer image for postgres:latest
docker.io/library/postgres:latest

serge@ubu2:~$ sudo docker run --name mypg -e POSTGRES_PASSWORD=postgres -d -p 5432:5432 postgres
234fda2d1953c80363a85faa046dfb1d1551821fe4746664ce157a90ad91a38e
serge@ubu2:~$ 


serge@ubu2:~$ sudo apt install postgresql-client-common
[sudo] пароль для serge: 
Чтение списков пакетов… Готово
Построение дерева зависимостей       
Чтение информации о состоянии… Готово
Следующий пакет устанавливался автоматически и больше не требуется:
  qemu
Для его удаления используйте «sudo apt autoremove».
Следующие НОВЫЕ пакеты будут установлены:
  postgresql-client-common
Обновлено 0 пакетов, установлено 1 новых пакетов, для удаления отмечено 0 пакетов, и 0 пакетов не обновлено.
Необходимо скачать 28,2 kB архивов.
После данной операции объём занятого дискового пространства возрастёт на 182 kB.
Пол:1 http://ru.archive.ubuntu.com/ubuntu focal-updates/main amd64 postgresql-client-common all 214ubuntu0.1 [28,2 kB]
Получено 28,2 kB за 0с (84,1 kB/s)                   
Выбор ранее не выбранного пакета postgresql-client-common.
(Чтение базы данных … на данный момент установлено 171408 файлов и каталогов.)
Подготовка к распаковке …/postgresql-client-common_214ubuntu0.1_all.deb …
Распаковывается postgresql-client-common (214ubuntu0.1) …
Настраивается пакет postgresql-client-common (214ubuntu0.1) …
Обрабатываются триггеры для man-db (2.9.1-1) …
serge@ubu2:~$ 

sudo docker run --name mypg -e POSTGRES_PASSWORD=postgres -d -p 5432:5432 postgres
[sudo] пароль для serge: 
c41249c88ec81267e6ff5dcbb25cd742edd2356cc9e2429d9dd49581eae0fc66
serge@ubu2:~$ 


Подключение к контейнеру:

serge@ubu2:~$ sudo docker exec -it mypg bash
root@234fda2d1953:/# 
root@234fda2d1953:/# 
root@234fda2d1953:/# 
root@234fda2d1953:/# psql -U postgres
psql (14.2 (Debian 14.2-1.pgdg110+1))
Type "help" for help.

Внутри него подключение к psql:

postgres=# 
--------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
Задача 2

postgres=# CREATE DATABASE test_db;
CREATE DATABASE
postgres=# 
postgres=# CREATE USER test_admin_user WITH PASSWORD 'admintest';
CREATE ROLE
postgres=# 
postgres=# CREATE USER test_simple_user WITH PASSWORD 'usertest';
CREATE ROLE
postgres=#
postgres=# GRANT SELECT, UPDATE, INSERT ON ALL TABLES IN SCHEMA public TO "test_simple_user";
GRANT
postgres=# GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO "test_admin_user";
GRANT
postgres=#
postgres=# CREATE TABLE orders (id SERIAL PRIMARY KEY, name TEXT, price INTEGER);
CREATE TABLE
postgres=# 
postgres=# CREATE TABLE clients (id SERIAL PRIMARY KEY, surname TEXT, country TEXT, id_value CHAR(8) NOT NULL, shopping INTEGER, FOREIGN KEY (shopping) REFERENCES orders (id));
CREATE TABLE

итоговый список БД после выполнения пунктов выше,

postgres=# \l
                                    List of databases
   Name    |  Owner   | Encoding |  Collate   |   Ctype    |      Access privileges   
    
-----------+----------+----------+------------+------------+--------------------------
----
 postgres  | postgres | UTF8     | en_US.utf8 | en_US.utf8 | 
 template0 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres              
   +
           |          |          |            |            | postgres=CTc/postgres
 template1 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres              
   +
           |          |          |            |            | postgres=CTc/postgres
 test_db   | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =Tc/postgres             
   +
           |          |          |            |            | postgres=CTc/postgres    
   +
           |          |          |            |            | test_admin_user=CTc/postg
res
(4 rows)

postgres=# 

описание таблиц

postgres=# 
postgres=# select column_name, data_type, character_maximum_length
from INFORMATION_SCHEMA.COLUMNS where table_name = 'clients';
 column_name | data_type | character_maximum_length 
-------------+-----------+--------------------------
 id          | integer   |                         
 shopping    | integer   |                         
 surname     | text      |                         
 country     | text      |                         
 id_value    | character |                        8
(5 rows)

postgres=# select column_name, data_type, character_maximum_length
from INFORMATION_SCHEMA.COLUMNS where table_name = 'orders';
 column_name | data_type | character_maximum_length 
-------------+-----------+--------------------------
 id          | integer   |                         
 price       | integer   |                         
 name        | text      |                         
(3 rows)

postgres=# 


SQL-запрос для выдачи списка пользователей с правами над таблицами test_db


postgres=# SELECT * FROM information_schema.table_privileges WHERE table_schema = 'public';
 grantor  |     grantee      | table_catalog | table_schema | table_name | privilege_t
ype | is_grantable | with_hierarchy 
----------+------------------+---------------+--------------+------------+------------
----+--------------+----------------
 postgres | postgres         | postgres      | public       | orders     | INSERT     
    | YES          | NO
 postgres | postgres         | postgres      | public       | orders     | SELECT     
    | YES          | YES
 postgres | postgres         | postgres      | public       | orders     | UPDATE     
    | YES          | NO
 postgres | postgres         | postgres      | public       | orders     | DELETE     
    | YES          | NO
 postgres | postgres         | postgres      | public       | orders     | TRUNCATE   
    | YES          | NO
 postgres | postgres         | postgres      | public       | orders     | REFERENCES 
    | YES          | NO
 postgres | postgres         | postgres      | public       | orders     | TRIGGER    
    | YES          | NO
 postgres | test_simple_user | postgres      | public       | orders     | INSERT     
    | NO           | NO
 postgres | test_simple_user | postgres      | public       | orders     | SELECT     
    | NO           | YES
 postgres | test_simple_user | postgres      | public       | orders     | UPDATE     

...skipping 1 line
 postgres | test_admin_user  | postgres      | public       | orders     | INSERT     
    | NO           | NO
 postgres | test_admin_user  | postgres      | public       | orders     | SELECT     
    | NO           | YES
 postgres | test_admin_user  | postgres      | public       | orders     | UPDATE     
    | NO           | NO
 postgres | test_admin_user  | postgres      | public       | orders     | DELETE     
    | NO           | NO
 postgres | test_admin_user  | postgres      | public       | orders     | TRUNCATE   
    | NO           | NO
 postgres | test_admin_user  | postgres      | public       | orders     | REFERENCES 
    | NO           | NO
 postgres | test_admin_user  | postgres      | public       | orders     | TRIGGER    
    | NO           | NO
 postgres | postgres         | postgres      | public       | clients    | INSERT     
    | YES          | NO
 postgres | postgres         | postgres      | public       | clients    | SELECT     
    | YES          | YES
 postgres | postgres         | postgres      | public       | clients    | UPDATE     
    | YES          | NO
 postgres | postgres         | postgres      | public       | clients    | DELETE     
    | YES          | NO
 postgres | postgres         | postgres      | public       | clients    | TRUNCATE   

...skipping 1 line
 postgres | postgres         | postgres      | public       | clients    | REFERENCES 
    | YES          | NO
 postgres | postgres         | postgres      | public       | clients    | TRIGGER    
    | YES          | NO
 postgres | test_simple_user | postgres      | public       | clients    | INSERT     
    | NO           | NO
 postgres | test_simple_user | postgres      | public       | clients    | SELECT     
    | NO           | YES
 postgres | test_simple_user | postgres      | public       | clients    | UPDATE     
    | NO           | NO
 postgres | test_admin_user  | postgres      | public       | clients    | INSERT     
    | NO           | NO
 postgres | test_admin_user  | postgres      | public       | clients    | SELECT     
    | NO           | YES
 postgres | test_admin_user  | postgres      | public       | clients    | UPDATE     
    | NO           | NO
 postgres | test_admin_user  | postgres      | public       | clients    | DELETE     
    | NO           | NO
 postgres | test_admin_user  | postgres      | public       | clients    | TRUNCATE   
    | NO           | NO
 postgres | test_admin_user  | postgres      | public       | clients    | REFERENCES 
    | NO           | NO
 postgres | test_admin_user  | postgres      | public       | clients    | TRIGGER    

...skipping 1 line
(34 rows)

postgres=# 



postgres=# SELECT * from information_schema.table_privileges WHERE grantee = 'test_admin_user';
 grantor  |     grantee     | table_catalog | table_schema | table_name | privilege_ty
pe | is_grantable | with_hierarchy 
----------+-----------------+---------------+--------------+------------+-------------
---+--------------+----------------
 postgres | test_admin_user | postgres      | public       | orders     | INSERT      
   | NO           | NO
 postgres | test_admin_user | postgres      | public       | orders     | SELECT      
   | NO           | YES
 postgres | test_admin_user | postgres      | public       | orders     | UPDATE      
   | NO           | NO
 postgres | test_admin_user | postgres      | public       | orders     | DELETE      
   | NO           | NO
 postgres | test_admin_user | postgres      | public       | orders     | TRUNCATE    
   | NO           | NO
 postgres | test_admin_user | postgres      | public       | orders     | REFERENCES  
   | NO           | NO
 postgres | test_admin_user | postgres      | public       | orders     | TRIGGER     
   | NO           | NO
 postgres | test_admin_user | postgres      | public       | clients    | INSERT      
   | NO           | NO
 postgres | test_admin_user | postgres      | public       | clients    | SELECT      
   | NO           | YES
 postgres | test_admin_user | postgres      | public       | clients    | UPDATE      

...skipping 1 line
 postgres | test_admin_user | postgres      | public       | clients    | DELETE      
   | NO           | NO
 postgres | test_admin_user | postgres      | public       | clients    | TRUNCATE    
   | NO           | NO
 postgres | test_admin_user | postgres      | public       | clients    | REFERENCES  
   | NO           | NO
 postgres | test_admin_user | postgres      | public       | clients    | TRIGGER     
   | NO           | NO
(14 rows)

postgres=# 



postgres=# SELECT * from information_schema.table_privileges WHERE grantee = 'test_simple_user';
 grantor  |     grantee      | table_catalog | table_schema | table_name | privilege_t
ype | is_grantable | with_hierarchy 
----------+------------------+---------------+--------------+------------+------------
----+--------------+----------------
 postgres | test_simple_user | postgres      | public       | orders     | INSERT     
    | NO           | NO
 postgres | test_simple_user | postgres      | public       | orders     | SELECT     
    | NO           | YES
 postgres | test_simple_user | postgres      | public       | orders     | UPDATE     
    | NO           | NO
 postgres | test_simple_user | postgres      | public       | clients    | INSERT     
    | NO           | NO
 postgres | test_simple_user | postgres      | public       | clients    | SELECT     
    | NO           | YES
 postgres | test_simple_user | postgres      | public       | clients    | UPDATE     
    | NO           | NO
(6 rows)

postgres=# 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Задача 3

INSERT INTO orders (id, name, price) VALUES (1, 'Шоколад', 10);
INSERT INTO orders (id, name, price) VALUES (2, 'Принтер', 3000);
INSERT INTO orders (id, name, price) VALUES (3, 'Книга', 500);
INSERT INTO orders (id, name, price) VALUES (4, 'Монитор', 7000);
INSERT INTO orders (id, name, price) VALUES (5, 'Гитара', 4000);

postgres=# SELECT * FROM orders;
 id |  name   | price 
----+---------+-------
  1 | Шоколад |    10
(1 row)
postgres=# 
postgres=# INSERT INTO orders (id, name, price) VALUES (1, 'Шоколад', 10);
INSERT 0 1

postgres=# 
postgres=# 
postgres=# INSERT INTO orders (id, name, price) VALUES (2, 'Принтер', 3000);
INSERT 0 1
postgres=# INSERT INTO orders (id, name, price) VALUES (3, 'Книга', 500);
INSERT 0 1
postgres=# INSERT INTO orders (id, name, price) VALUES (4, 'Монитор', 7000);
INSERT 0 1
postgres=# INSERT INTO orders (id, name, price) VALUES (5, 'Гитара', 4000);
INSERT 0 1

postgres=# SELECT * FROM orders;
 id |  name   | price 
----+---------+-------
  1 | Шоколад |    10
  2 | Принтер |  3000
  3 | Книга   |   500
  4 | Монитор |  7000
  5 | Гитара  |  4000
(5 rows)

postgres=# 

INSERT INTO clients (id, surname, country, id_value) VALUES (1, 'Иванов Иван Иванович', 'USA', 'US');
INSERT INTO clients (id, surname, country, id_value) VALUES (2, 'Петров Петр Петрович', 'Canada', 'CA');
INSERT INTO clients (id, surname, country, id_value) VALUES (3, 'Иоганн Себастьян Бах', 'Japan', 'JP');
INSERT INTO clients (id, surname, country, id_value) VALUES (4, 'Ронни Джеймс Дио', 'Russia', 'RU');
INSERT INTO clients (id, surname, country, id_value) VALUES (5, 'Ritchie Blackmore', 'Russia', 'RU');


postgres=# 
postgres=# INSERT INTO clients (id, surname, country, id_value) VALUES (1, 'Иванов Иван Иванович', 'USA', 'US');
INSERT 0 1
postgres=# INSERT INTO clients (id, surname, country, id_value) VALUES (2, 'Петров Петр Петрович', 'Canada', 'CA');
INSERT 0 1
postgres=# INSERT INTO clients (id, surname, country, id_value) VALUES (3, 'Иоганн Себастьян Бах', 'Japan', 'JP');
INSERT 0 1
postgres=# INSERT INTO clients (id, surname, country, id_value) VALUES (4, 'Ронни Джеймс Дио', 'Russia', 'RU');
INSERT 0 1
postgres=# INSERT INTO clients (id, surname, country, id_value) VALUES (5, 'Ritchie Blackmore', 'Russia', 'RU');
INSERT 0 1
postgres=# 


postgres=# 
postgres=# SELECT * FROM clients;
 id |       surname        | country | id_value | shopping 
----+----------------------+---------+----------+----------
  1 | Иванов Иван Иванович | USA     | US       |         
  2 | Петров Петр Петрович | Canada  | CA       |         
  3 | Иоганн Себастьян Бах | Japan   | JP       |         
  4 | Ронни Джеймс Дио     | Russia  | RU       |         
  5 | Ritchie Blackmore    | Russia  | RU       |         
(5 rows)

количество записей в таблицах 


SELECT COUNT(*) FROM clients;

SELECT COUNT(*) FROM orders;

postgres=# SELECT COUNT(*) FROM clients;
 count 
-------
     5
(1 row)


postgres=# SELECT COUNT(*) FROM orders;
 count 
-------
     5
(1 row)


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Задача  4

postgres=# update clients set shopping = 3 where id = 1;
UPDATE 1
postgres=# update clients set shopping = 4 where id = 2;
UPDATE 1
postgres=# update clients set shopping = 5 where id = 3;
UPDATE 1
postgres=# 



postgres=# SELECT surname, shopping FROM clients WHERE shopping IS NOT NULL;
       surname        | shopping 
----------------------+----------
 Иванов Иван Иванович |        3
 Петров Петр Петрович |        4
 Иоганн Себастьян Бах |        5
(3 rows)


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Задача 5

postgres=# EXPLAIN SELECT * FROM clients WHERE shopping IS NOT NULL;
                         QUERY PLAN                         
------------------------------------------------------------
 Seq Scan on clients  (cost=0.00..16.00 rows=597 width=108)
   Filter: (shopping IS NOT NULL)
(2 rows)

postgres=# EXPLAIN ANALYZE SELECT * FROM clients WHERE shopping IS NOT NULL;
                                              QUERY PLAN                              
                
--------------------------------------------------------------------------------------
----------------
 Seq Scan on clients  (cost=0.00..16.00 rows=597 width=108) (actual time=0.014..0.016 
rows=3 loops=1)
   Filter: (shopping IS NOT NULL)
   Rows Removed by Filter: 2
 Planning Time: 0.058 ms
 Execution Time: 0.031 ms
(5 rows)

postgres=# 


EXPLAIN выводит информацию, параллельно разбираясь, что же происходит внутри PostgreSQL.
EXPLAIN не запускает сам запрос, это лишь оценка. Для получения точных результатов нужно запустить EXPLAIN ANALYZE.
Он считает, что будет возвращено 597 строк, и что средняя ширина каждой строки будет равна 108 байтам.
Время выполнения: 0,031 мс.


---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------




